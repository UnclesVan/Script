local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    ScriptHub = Window:AddTab({ Title = "Script Hub", Icon = "leaf" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "money" }),
    Visuals = Window:AddTab({ Title = "UI Visual", Icon = "paintbrush" }),
    AutoBuy = Window:AddTab({ Title = "Auto Buy", Icon = "shopping-cart" })
}

-- SCRIPT HUB TAB
do
    Tabs.ScriptHub:AddButton({
        Title = "Execute Prodigy X Script",
        Description = "Load Prodigy X script from GitHub.",
        Callback = function()
            loadstring(game:HttpGet(('https://raw.githubusercontent.com/ReQiuYTPL/hub/main/ReQiuYTPLHub.lua'), true))()
        end
    })

    Tabs.ScriptHub:AddButton({
        Title = "Execute TBI Pet Farm",
        Description = "Load TBI Pet Farm script.",
        Callback = function()
            loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/c29af06acdb7a80fb239415fd322efe9.lua"))()
        end
    })

    Tabs.ScriptHub:AddButton({
        Title = "Execute TBI House Cloner",
        Description = "Load TBI House Cloner script.",
        Callback = function()
            loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/a1785d95674fad4fef000612f70f2608.lua"))()
        end
    })
end

-- AUTOFARM TAB
do
    Tabs.AutoFarm:AddButton({
        Title = "Execute TBI Ice Dimension Farm",
        Description = "Load TBI Ice Dimension Farm script.",
        Callback = function()
            loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/101333658c343905d93a1433b9916ebc.lua"))()
        end
    })

    local CircleTeleportationActive = false
    local delayTime = 7  -- Default wait time

    -- Input for teleportation delay
    local delayInput = Tabs.AutoFarm:AddInput("TeleportDelayInput", {
        Title = "Teleport Delay (seconds)",
        Placeholder = "Enter delay in seconds",
        RemoveTextAfterFocusLost = true,
        Callback = function(inputValue)
            delayTime = tonumber(inputValue) or 7  -- Default to 7 if invalid input
            print("Teleport delay set to:", delayTime)
        end,
    })

    local CircleToggle = Tabs.AutoFarm:AddToggle("CircleTeleportation", 
    {
        Title = "Toggle Circle Teleportation",
        Description = "Turn off or on circle teleportation to: workspace.Interiors['MainMap!Default'].BlossomShakedownJoinZone.Ring",
        Default = false,
        Callback = function(state)
            CircleTeleportationActive = state
            
            if state then
                print("Circle Teleportation Enabled")
                
                spawn(function() 
                    while CircleTeleportationActive do
                        local player = game.Players.LocalPlayer
                        local targetRing = workspace:FindFirstChild("Interiors") 
                                           and workspace.Interiors:FindFirstChild("MainMap!Default") 
                                           and workspace.Interiors["MainMap!Default"]:FindFirstChild("BlossomShakedownJoinZone") 
                                           and workspace.Interiors["MainMap!Default"].BlossomShakedownJoinZone:FindFirstChild("Ring")

                        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            -- Teleport the player to the Ring if it exists
                            if targetRing then
                                player.Character.HumanoidRootPart.CFrame = targetRing.CFrame
                            else
                                print("Target ring not found") -- Debugging message
                            end
                        else
                            print("Player or character not ready") -- Debugging message
                        end

                        -- Teleport all models in workspace.Pets
                        for _, petModel in pairs(workspace.Pets:GetChildren()) do
                            if petModel:IsA("Model") and petModel:FindFirstChild("HumanoidRootPart") then
                                -- Teleport the pet to the Ring
                                local petRootPart = petModel.HumanoidRootPart
                                petRootPart.CFrame = targetRing.CFrame
                            end
                        end

                        wait(delayTime)  -- Use the input value for the wait time
                    end
                end)

                print("Circle Teleportation Started")
            else
                print("Circle Teleportation Disabled")
            end
        end 
    })

    -- Toggle for Sakura Swoop Minigame Farm
    local sakuraSwoopActive = false

    local SakuraToggle = Tabs.AutoFarm:AddToggle("SakuraSwoopMinigameFarm", 
    {
        Title = "Toggle Sakura Swoop Minigame Farm",
        Description = "Enable or disable Sakura Swoop Minigame farming.",
        Default = false,
        Callback = function(state)
            sakuraSwoopActive = state
            
            if state then
                print("Sakura Swoop Minigame Farm Enabled")

                spawn(function()
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")  -- Ensure the HumanoidRootPart is defined
                    local playerGui = player:WaitForChild("PlayerGui")  -- Reference to PlayerGui

                    -- Function to convert timer from the UI string to a number
                    local function getTimeRemaining()
                        local timerLabel = playerGui:FindFirstChild("MinigameInGameApp")
                            and playerGui.MinigameInGameApp:FindFirstChild("Body")
                            and playerGui.MinigameInGameApp.Body:FindFirstChild("Left")
                            and playerGui.MinigameInGameApp.Body.Left.Container:FindFirstChild("ValueLabel")

                        if timerLabel and tonumber(timerLabel.Text) then
                            return tonumber(timerLabel.Text)  -- Return the number of seconds
                        end
                        return nil  -- Return nil if ValueLabel is not found or not a number
                    end

                    local hasTeleportedToJoinZone = false  -- Flag to track if we have teleported

                    while sakuraSwoopActive do
                        -- Check if there are any children under workspace.Interiors
                        local interiors = workspace:FindFirstChild("Interiors")
                        if not interiors or #interiors:GetChildren() == 0 then
                            print("No items found in workspace.Interiors! Stopping all teleportation.")
                            wait(1)  -- Delay before the next scan attempt
                            continue -- Restart the loop to keep scanning
                        end

                        -- Check if we need to teleport to the JoinZone
                        if not hasTeleportedToJoinZone then
                            local joinZone = workspace.Interiors:FindFirstChild("MainMap!Default"):FindFirstChild("BlossomShakedownJoinZone"):FindFirstChild("Ring")

                            if joinZone then
                                -- Teleport to the JoinZone location once
                                humanoidRootPart.CFrame = joinZone.CFrame
                                print("Teleported to Ring at BlossomShakedownJoinZone.")
                                hasTeleportedToJoinZone = true  -- Set the flag to true to prevent further teleportation
                                wait(1)  -- Optional: Wait a moment after teleporting 
                            else
                                print("Destination Ring not found in BlossomShakedownJoinZone!")
                            end
                        end

                        print("Scanning for: Interiors.BlossomShakedownInterior")

                        -- Attempt to find the BlossomShakedownInterior model
                        local blossomShakedownInterior = interiors:FindFirstChild("BlossomShakedownInterior")

                        if blossomShakedownInterior then
                            print("BlossomShakedownInterior model found.")

                            -- Search for the paraglider
                            print("Searching for: Interiors.BlossomShakedownInterior.GliderInteractions > spring_2025_default_paraglider")
                            local paraglider = blossomShakedownInterior.GliderInteractions:FindFirstChild("spring_2025_default_paraglider")
                            local collisionPart = paraglider and paraglider:FindFirstChild("Collision")

                            if collisionPart then
                                -- Teleport to the Collision part's position
                                humanoidRootPart.CFrame = collisionPart.CFrame
                                print("Teleported to Collision part of Paraglider:", collisionPart.Name)
                                wait(7)  -- Wait for 7 seconds at this position
                            else
                                print("Collision part of Paraglider not found!")
                            end

                            local foundPetal = false  -- Flag to check if a Petal was found

                            -- Iterate through all models in the Rings
                            local rings = blossomShakedownInterior:FindFirstChild("Rings")
                            if rings then
                                for _, ringModel in ipairs(rings:GetChildren()) do
                                    if ringModel:IsA("Model") then
                                        print("Checking ring model:", ringModel.Name)

                                        for _, nestedModel in ipairs(ringModel:GetChildren()) do
                                            if nestedModel:IsA("Model") then
                                                local petal = nestedModel:FindFirstChild("Petal")
                                                if petal and petal:IsA("MeshPart") then
                                                    foundPetal = true
                                                    humanoidRootPart.CFrame = petal.CFrame
                                                    print("Teleporting to Petal:", petal.Name)
                                                    wait(0.5)  -- Wait briefly to allow for the teleportation
                                                end
                                            end
                                        end
                                    end
                                end

                                if not foundPetal then
                                    print("No Petals found.")
                                end

                                -- Teleport to Ring Spawns if they exist
                                print("Teleporting to Ring Spawns...")
                                local foundRingSpawn = false
                                local ringSpawns = blossomShakedownInterior:FindFirstChild("RingSpawns")
                                if ringSpawns then
                                    for _, ringSpawn in ipairs(ringSpawns:GetChildren()) do
                                        if ringSpawn:IsA("Part") then
                                            foundRingSpawn = true
                                            humanoidRootPart.CFrame = ringSpawn.CFrame  -- Teleport to the Ring Spawn's position
                                            print("Teleporting to Ring Spawn:", ringSpawn.Name)
                                            wait(0.5)  -- Adjust the wait time for controlled teleport speed
                                        end
                                    end
                                else
                                    print("No Ring Spawns found.")
                                end
                            else
                                print("Rings model not found!")
                            end
                        else
                            print("BlossomShakedownInterior model not found! Continuing to scan...")
                            wait(1)  -- Delay before retrying the scan
                            continue  -- Restart the loop to keep scanning
                        end

                        -- Updraft Button Check using the provided path
                        print("Searching for: Updraft Button")
                        local updraftButton = playerGui:FindFirstChild("MinigameHotbarApp")
                            and playerGui.MinigameHotbarApp:FindFirstChild("Hotbar")
                            and playerGui.MinigameHotbarApp.Hotbar:FindFirstChild("UpdraftButton")
                            and playerGui.MinigameHotbarApp.Hotbar.UpdraftButton:FindFirstChild("Button")

                        if updraftButton then
                            pcall(function()
                                for _, connection in pairs(getconnections(updraftButton.MouseButton1Down)) do
                                    connection:Fire()
                                end
                                for _, connection in pairs(getconnections(updraftButton.MouseButton1Click)) do
                                    connection:Fire()
                                end
                                for _, connection in pairs(getconnections(updraftButton.MouseButton1Up)) do
                                    connection:Fire()
                                end
                            end)
                            print("Updraft Button activated.")
                        else
                            print("Updraft Button not found in PlayerGui!")
                        end

                        -- Check timer; reset loop if more than 30 seconds have passed
                        local timeRemaining = getTimeRemaining()
                        if timeRemaining and timeRemaining <= 30 then
                            print("30 seconds reached. Resetting loop to scan again.")
                            wait(1)  -- Optional: Delay before scanning again
                        end

                        wait(1)  -- Pause before scanning again
                    end
                end)

                print("Sakura Swoop Minigame Farm Started")
            else
                print("Sakura Swoop Minigame Farm Disabled")
            end
        end 
    })
end

-- UI VISUAL TAB
do
    Tabs.Visuals:AddButton({
        Title = "Execute Candy Display",
        Description = "Load Candy Display UI.",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/UnclesVan/AdoptMeHalloWeenUis/refs/heads/main/CandyUiLoader.lua"))()
        end
    })

    Tabs.Visuals:AddButton({
        Title = "Execute Shards Display",
        Description = "Load Shards Display UI.",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/UnclesVan/AdoptMeHalloWeenUis/refs/heads/main/ShardsDisplay"))()
        end
    })

    Tabs.Visuals:AddButton({
        Title = "Execute Circle Timer Display",
        Description = "Load Circle Timer UI.",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/UnclesVan/AdoptMeHalloWeenUis/refs/heads/main/CircleTimer"))()
        end
    })
end

-- AUTO BUY TAB
do
    local selectedItem
    local amountToBuy

    -- Dropdown for selecting items to buy
    local Dropdown = Tabs.AutoBuy:AddDropdown("ItemSelection", {
        Title = "Select Item to Buy",
        Description = "Choose an item to auto buy.",
        Values = {
            "ice_dimension_2025_subzero_popsicle_bait", 
            "ice_dimension_2025_shiver_cone_bait"
        },
        Multi = false,
        Default = 1,
        Callback = function(Value)
            selectedItem = Value
            print("Selected item:", Value)
        end
    })

    -- Input for the amount of items to buy
    local AmountInput = Tabs.AutoBuy:AddInput("BuyAmount", {
        Title = "Amount to Buy",
        Placeholder = "Enter amount",
        RemoveTextAfterFocusLost = true,
        Callback = function(amount)
            amountToBuy = tonumber(amount) or 1 -- Default to 1 if invalid input
            print("Amount to buy set to:", amountToBuy)
        end
    })

    -- Auto Buy Toggle
    local autoBuyEnabled = false
    Tabs.AutoBuy:AddToggle("AutoBuyEnabled", {
        Title = "Enable Auto Buy",
        Description = "Automatically buy the selected item.",
        Default = false,
        Callback = function(state)
            autoBuyEnabled = state
            if state then
                spawn(function()
                    while autoBuyEnabled do
                        if selectedItem and amountToBuy then
                            local args = {
                                [1] = "food",  -- Change to "gifts" if purchasing the fire sticker pack instead
                                [2] = selectedItem,
                                [3] = {
                                    ["buy_count"] = amountToBuy
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                        end
                        wait(2) -- Wait time between purchases
                    end
                end)
            end
        end
    })

    -- Auto Open Toggle for Fire Sticker Pack
    local autoOpenEnabled = false
    Tabs.AutoBuy:AddToggle("AutoOpenStickerPack", {
        Title = "Auto Open Fire Sticker Pack",
        Description = "Automatically open the fire sticker pack.",
        Default = false,
        Callback = function(state)
            autoOpenEnabled = state
            if state then
                spawn(function()
                    while autoOpenEnabled do
                        local args = {
                            [1] = "ice_dimension_2025_fire_dimension_sticker_pack",
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("LootBoxAPI/ExchangeItemForReward"):InvokeServer(unpack(args))
                        wait(2) -- Adjust the wait time as necessary
                    end
                end)
            end
        end
    })

    -- Auto Buy for Fire Sticker Pack
    local fireStickerEnabled = false
    local fireStickerAmount = 1
    Tabs.AutoBuy:AddToggle("AutoBuyFireSticker", {
        Title = "Auto Buy Fire Sticker Pack",
        Description = "Automatically buy the fire sticker pack.",
        Default = false,
        Callback = function(state)
            fireStickerEnabled = state
            if state then
                spawn(function()
                    while fireStickerEnabled do
                        local args = {
                            [1] = "gifts",
                            [2] = "ice_dimension_2025_fire_dimension_sticker_pack",
                            [3] = {
                                ["buy_count"] = fireStickerAmount
                            }
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                        wait(2) -- Adjust the wait time as necessary
                    end
                end)
            end
        end
    })

    -- Input for the amount of fire sticker packs to buy
    Tabs.AutoBuy:AddInput("FireStickerAmount", {
        Title = "Amount to Buy Fire Sticker Pack",
        Placeholder = "Enter amount",
        RemoveTextAfterFocusLost = true,
        Callback = function(amount)
            fireStickerAmount = tonumber(amount) or 1 -- Default to 1 if invalid input
            print("Fire sticker pack amount set to:", fireStickerAmount)
        end
    })

    -- Dehash Remotes Button
    Tabs.AutoBuy:AddButton({
        Title = "Dehash Remotes",
        Description = "Dehash remotes using a script.",
        Callback = function()
            loadstring(game:HttpGet('https://raw.githubusercontent.com/UnclesVan/AdoPtMe-/refs/heads/main/dehashwithslashinmiddle'))()
        end
    })
end

-- Initialize SaveManager and InterfaceManager
do
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({})
    InterfaceManager:SetFolder("FluentScriptHub")
    SaveManager:SetFolder("FluentScriptHub/specific-game")

    InterfaceManager:BuildInterfaceSection(Tabs.Visuals)
    SaveManager:BuildConfigSection(Tabs.Visuals)
end

-- Notify the user that the script is loaded
Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been successfully loaded.",
    Duration = 8
})

-- Load the autoload config if there is one
SaveManager:LoadAutoloadConfig()
